package com.clearexpenses.main.service.serviceImplementation;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.clearexpenses.main.dtos.ExpensesRequest;
import com.clearexpenses.main.dtos.ExpensesResponse;
import com.clearexpenses.main.dtos.GroupRequest;
import com.clearexpenses.main.dtos.ItemList;
import com.clearexpenses.main.entities.ExpensesGroup;
import com.clearexpenses.main.entities.UserItems;
import com.clearexpenses.main.entities.Users;
import com.clearexpenses.main.repositories.GroupRespository;
import com.clearexpenses.main.repositories.ItemsRespository;
import com.clearexpenses.main.repositories.UserRepository;
import com.clearexpenses.main.service.ExpensesServices;

@Service
public class ExpensesServiceImplementation implements ExpensesServices {
	
	@Autowired
	private  GroupRespository groupRespository;
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private ItemsRespository itemsRespository;
	
	@Override
	public Boolean createGroup(GroupRequest groupRequest) {
		ExpensesGroup res=null;
		try {
			ExpensesGroup expensesGroup=new ExpensesGroup();
			expensesGroup.setName(groupRequest.getGroup_name());
			expensesGroup.setUsers(null);
			res = groupRespository.save(expensesGroup);
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		
		if(res.getId()!=0) 
			return true;
		else
			return false;
	}

	@Override
	public List<Users> addUsersByGroup(GroupRequest groupRequest) {
		List<Users> userList = new ArrayList<Users>();

		ExpensesGroup groupObject = groupRespository.findByName(groupRequest.getGroup_name());

		System.out.println("not found :" + groupObject);
		try {
			if (groupObject != null) {
				for (int i = 0; i < groupRequest.getUsers().size(); i++) {
					Users user = new Users();
					user.setName(groupRequest.getUsers().get(i).getUser_name());
					user.setMobile(groupRequest.getUsers().get(i).getMobile_number());
					user.setAddress(groupRequest.getUsers().get(i).getAddress());
					user.setExpensesGroup(groupObject);
					userList.add(user);
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}

		return userRepository.saveAll(userList);

	}

	@Override
	public List<UserItems> addExpensesByUser(ExpensesRequest expensesRequest) {

		List<UserItems> list = new ArrayList<UserItems>();
		LocalDate current = LocalDate.now();
		List<UserItems> resp = null;
		try {
			Optional<Users> userExist = userRepository.findById(expensesRequest.getUser_id());

			if (userExist.isPresent()) {

				for (ItemList itr : expensesRequest.getItemsList()) {
					UserItems items = new UserItems();
					items.setName(itr.getItem_name());
					items.setPrice(itr.getItem_price());
					items.setUserid(userExist.get().getId());
					items.setDate(current);
					items.setGroupId(userExist.get().getExpensesGroup().getId());
					list.add(items);
				}

				resp = itemsRespository.saveAll(list);

			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}

		return resp;
	}

	@Override
	public List<ExpensesResponse> calculateExpeses(Long groupId) {
		// TODO Auto-generated method stub
		Optional<UserItems> groupExist = itemsRespository.findById(groupId);
		if(groupExist.isPresent()){
			 List<Object[]> allItems = itemsRespository.findSumOfExpensesByUser(groupExist.get().getId());
			 Float total = itemsRespository.findTotalExpensesOfAllUsers(groupExist.get().getId());

			 if(allItems.size()>0) {
				 
				float numberOfUsers=allItems.size();
				float avarageExpeses=total/numberOfUsers;
				 
				for (Object[] itr : allItems) {
					ExpensesResponse expensesResponse = new ExpensesResponse();
					expensesResponse.setId((Long) itr[1]);
					expensesResponse.setName((String) itr[2]);
					expensesResponse.setMobile((String) itr[3]);
					float money = avarageExpeses - (float) itr[0];
					if (money >= 0) {
						expensesResponse.setNeedToPay(money);
					} else {
						expensesResponse.setNeedToReceive(money);
					}

				}
			 }
		}
		return null;
	}

}
